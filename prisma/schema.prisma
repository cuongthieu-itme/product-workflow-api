generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum CustomerSource {
  WEBSITE
  FACEBOOK
  INSTAGRAM
  GOOGLE_ADS
  INTRODUCER
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id                Int       @id @default(autoincrement())
  fullName          String
  userName          String    @unique
  email             String    @unique
  phoneNumber       String?   @unique
  avatar            String?
  password          String
  isVerifiedAccount Boolean   @default(false)
  verifiedDate      DateTime?
  verifiedToken     String?
  role              UserRole
  lastLoginDate     DateTime?

  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id], name: "user_department_relation")

  headOfDepartment Department? @relation("department_head_relation")

  sessions            UserSession?         @relation("user_session_relation")
  resetPasswordTokens ResetPasswordToken[] @relation("user_reset_password_relation")
  customers           Customer[]           @relation("user_customers_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([userName])
  @@index([phoneNumber])
  @@index([departmentId])
  @@map("users")
}

model UserSession {
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], name: "user_session_relation")
  token  String @unique

  @@id([userId, token])
  @@map("user_sessions")
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], name: "user_reset_password_relation")
  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reset_password_tokens")
}

model Department {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  headId Int?  @unique
  head   User? @relation(fields: [headId], references: [id], name: "department_head_relation")

  members User[] @relation("user_department_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([headId])
  @@map("departments")
}

model StatusProduct {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  color       String
  procedure   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("status_products")
}

model Customer {
  id          Int            @id @default(autoincrement())
  fullName    String
  phoneNumber String         @unique
  email       String         @unique
  gender      Gender
  dateOfBirth DateTime?
  source      CustomerSource

  userId Int
  user   User @relation(fields: [userId], references: [id], name: "user_customers_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("customers")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  products Product[] @relation("category_product_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@map("categories")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], name: "category_product_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@map("products")
}

model Ingredient {
  id          Int      @id @default(autoincrement())
  name        String
  code        String
  quantity    Int
  unit        String
  origin      String
  description String?
  image       String[]
  isActive    Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ingredients")
}

model Accessory {
  id          Int      @id @default(autoincrement())
  name        String
  code        String
  quantity    Int
  description String?
  image       String[]
  isActive    Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accessories")
}

model Procedure {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  version     String

  subprocesses Subprocess[] @relation("procedure_subprocess_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("procedures")
}

model Subprocess {
  id                         Int     @id @default(autoincrement())
  name                       String
  description                String?
  estimatedNumberOfDays      Int
  numberOfDaysBeforeDeadline Int?
  roleOfThePersonInCharge    String?
  isRequired                 Boolean @default(false)
  isStepWithCost             Boolean @default(false)

  procedureId Int
  procedure   Procedure @relation(fields: [procedureId], references: [id], name: "procedure_subprocess_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([procedureId])
  @@map("subprocesses")
}
