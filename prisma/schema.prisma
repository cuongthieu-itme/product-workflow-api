generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum CustomerSource {
  WEBSITE
  FACEBOOK
  INSTAGRAM
  GOOGLE_ADS
  INTRODUCER
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SourceRequest {
  CUSTOMER
  OTHER
}

enum MaterialType {
  INGREDIENT
  ACCESSORY
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
}

enum NotificationType {
  REQUEST
}

enum StatusSubprocessHistory {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  SKIPPED
}

model User {
  id                Int       @id @default(autoincrement())
  fullName          String
  userName          String    @unique
  email             String    @unique
  phoneNumber       String?   @unique
  avatar            String?
  password          String
  isVerifiedAccount Boolean   @default(false)
  verifiedDate      DateTime?
  verifiedToken     String?
  role              UserRole
  lastLoginDate     DateTime?
  isFirstLogin      Boolean   @default(true)

  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id], name: "user_department_relation")

  headOfDepartment Department? @relation("department_head_relation")

  sessions            UserSession?         @relation("user_session_relation")
  resetPasswordTokens ResetPasswordToken[] @relation("user_reset_password_relation")
  customers           Customer[]           @relation("user_customers_relation")
  requests            Request[]            @relation("user_request_relation")
  evaluates           Evaluate[]           @relation("user_evaluate_relation")
  subprocessesHistory SubprocessHistory[]  @relation("user_subprocess_history_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([userName])
  @@index([phoneNumber])
  @@index([departmentId])
  @@map("users")
}

model UserSession {
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], name: "user_session_relation")
  token  String @unique

  @@id([userId, token])
  @@map("user_sessions")
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], name: "user_reset_password_relation")
  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reset_password_tokens")
}

model Department {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  headId Int?  @unique
  head   User? @relation(fields: [headId], references: [id], name: "department_head_relation")

  members             User[]              @relation("user_department_relation")
  subprocesses        Subprocess[]        @relation("department_subprocess_relation")
  subprocessesHistory SubprocessHistory[] @relation("department_subprocess_history_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([headId])
  @@map("departments")
}

model StatusProduct {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  color       String

  procedureId Int
  procedure   Procedure @relation(fields: [procedureId], references: [id], name: "procedure_status_relation")

  procedureHistoryId Int?
  procedureHistory   ProcedureHistory? @relation(fields: [procedureHistoryId], references: [id], name: "procedure_history_status_relation")

  requests Request[] @relation("request_status_product_relation")
  products Product[] @relation("product_status_product_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("status_products")
}

model Customer {
  id          Int            @id @default(autoincrement())
  fullName    String
  phoneNumber String         @unique
  email       String         @unique
  gender      Gender
  dateOfBirth DateTime?
  source      CustomerSource

  userId Int
  user   User @relation(fields: [userId], references: [id], name: "user_customers_relation")

  requests Request[] @relation("customer_request_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("customers")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  products Product[] @relation("category_product_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@map("categories")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], name: "category_product_relation")

  statusProductId Int?
  statusProduct   StatusProduct? @relation(fields: [statusProductId], references: [id], name: "product_status_product_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@map("products")
}

model Procedure {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  version     Int     @default(1)

  statusProducts StatusProduct[] @relation("procedure_status_relation")
  subprocesses   Subprocess[]    @relation("procedure_subprocess_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("procedures")
}

model Subprocess {
  id                         Int     @id @default(autoincrement())
  name                       String
  description                String?
  estimatedNumberOfDays      Int
  numberOfDaysBeforeDeadline Int?
  roleOfThePersonInCharge    String?
  isRequired                 Boolean @default(false)
  isStepWithCost             Boolean @default(false)
  step                       Int

  procedureId Int
  procedure   Procedure @relation(fields: [procedureId], references: [id], name: "procedure_subprocess_relation")

  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id], name: "department_subprocess_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([procedureId])
  @@index([departmentId])
  @@map("subprocesses")
}

model ProcedureHistory {
  id          Int     @id @default(autoincrement())
  name        String?
  description String?
  version     Int     @default(1)

  statusProducts      StatusProduct[]     @relation("procedure_history_status_relation")
  subprocessesHistory SubprocessHistory[] @relation("procedure_history_subprocess_history_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  request   Request? @relation("request_procedure_history_relation")

  @@map("procedures_history")
}

model SubprocessHistory {
  id                         Int              @id @default(autoincrement())
  name                       String
  description                String?
  estimatedNumberOfDays      Int
  numberOfDaysBeforeDeadline Int?
  roleOfThePersonInCharge    String?
  isRequired                 Boolean          @default(false)
  isStepWithCost             Boolean          @default(false)
  step                       Int
  procedureHistoryId         Int
  procedureHistory           ProcedureHistory @relation(fields: [procedureHistoryId], references: [id], name: "procedure_history_subprocess_history_relation")

  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id], name: "department_subprocess_history_relation")

  price     Int?
  startDate DateTime?
  endDate   DateTime?
  status    StatusSubprocessHistory @default(PENDING)
  userId    Int?
  user      User?                   @relation(fields: [userId], references: [id], name: "user_subprocess_history_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([procedureHistoryId])
  @@index([departmentId])
  @@index([userId])
  @@map("subprocesses_history")
}

model SourceOther {
  id           Int    @id @default(autoincrement())
  name         String
  specifically String

  requests Request[] @relation("source_other_request_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("source_others")
}

model RequestMaterial {
  id         Int @id @default(autoincrement())
  requestId  Int
  materialId Int
  quantity   Int

  request  Request  @relation(fields: [requestId], references: [id], onDelete: Cascade, name: "request_materials_relation")
  material Material @relation(fields: [materialId], references: [id], name: "request_materials_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([requestId, materialId])
  @@map("request_materials")
}

model Request {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  productLink String[]
  media       String[]
  source      SourceRequest
  status      RequestStatus @default(PENDING)

  createdById        Int?
  createdBy          User?             @relation(fields: [createdById], references: [id], name: "user_request_relation")
  customerId         Int?
  customer           Customer?         @relation(fields: [customerId], references: [id], name: "customer_request_relation")
  sourceOtherId      Int?
  sourceOther        SourceOther?      @relation(fields: [sourceOtherId], references: [id], name: "source_other_request_relation")
  statusProductId    Int?
  statusProduct      StatusProduct?    @relation(fields: [statusProductId], references: [id], name: "request_status_product_relation")
  procedureHistoryId Int?              @unique
  procedureHistory   ProcedureHistory? @relation(fields: [procedureHistoryId], references: [id], name: "request_procedure_history_relation")

  requestMaterials RequestMaterial[] @relation("request_materials_relation")
  evaluates        Evaluate[]        @relation("request_evaluate_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
  @@index([sourceOtherId])
  @@index([statusProductId])
  @@map("requests")
}

model Origin {
  id   Int    @id @default(autoincrement())
  name String @unique

  materials Material[] @relation("origin_material_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("origins")
}

model Material {
  id          Int          @id @default(autoincrement())
  name        String
  code        String       @unique
  quantity    Int
  unit        String
  description String?
  image       String[]
  isActive    Boolean      @default(true)
  type        MaterialType @default(INGREDIENT)

  originId Int
  origin   Origin @relation(fields: [originId], references: [id], name: "origin_material_relation")

  requestInput RequestInput? @relation("request_input_material_relation")

  requestMaterials RequestMaterial[] @relation("request_materials_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("materials")
}

model NotificationAdmin {
  id      Int              @id @default(autoincrement())
  title   String
  content String
  type    NotificationType
  isRead  Boolean          @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notification_admins")
}

model RequestInput {
  id            Int       @id @default(autoincrement())
  quantity      Int?
  expectedDate  DateTime?
  supplier      String?
  sourceCountry String?
  price         Int?
  reason        String?

  materialId Int?      @unique
  material   Material? @relation(fields: [materialId], references: [id], name: "request_input_material_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("request_inputs")
}

model Evaluate {
  id          Int     @id @default(autoincrement())
  title       String
  reviewType  String
  score       Int     @default(0)
  description String?
  isAnonymous Boolean @default(false)

  requestId Int
  request   Request @relation(fields: [requestId], references: [id], name: "request_evaluate_relation")

  createdById Int?
  createdBy   User? @relation(fields: [createdById], references: [id], name: "user_evaluate_relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("evaluates")
}
